# -*- coding: utf-8 -*-
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

import environ
from django.templatetags.static import static
from django.urls import reverse_lazy

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# django-environ
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    "unfold",
    "unfold.contrib.filters",
    "unfold.contrib.forms",
    "unfold.contrib.guardian",
    "unfold.contrib.simple_history",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "corsheaders",
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    "ninja_jwt",
    "ninja_jwt.token_blacklist",
    "django_cleanup.apps.CleanupConfig",
    "src.users",
    "src.main",
    "src.products",
    "src.orders",
    "src.games",
    "ninja_extra",
    "meta",
]
AUTH_USER_MODEL = "users.User"
PASSWORD_RESET_TIMEOUT = 1800  # 30 minutes
ACCESS_TOKEN_EXPIRE_MINUTES = 30  # Change the token expiration time to 30 minutes
GOOGLE_OAUTH_CLIENT_ID = env('GOOGLE_OAUTH_CLIENT_ID')
GOOGLE_OAUTH_CLIENT_SECRET = env('GOOGLE_OAUTH_CLIENT_SECRET')

NINJA_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=5),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=25),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'ninja_jwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('ninja_jwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'ninja_jwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(days=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=5),

    # For Controller Schemas
    # FOR OBTAIN PAIR
    'TOKEN_OBTAIN_PAIR_INPUT_SCHEMA': "ninja_jwt.schema.TokenObtainPairInputSchema",
    'TOKEN_OBTAIN_PAIR_REFRESH_INPUT_SCHEMA': "ninja_jwt.schema.TokenRefreshInputSchema",
    # FOR SLIDING TOKEN
    'TOKEN_OBTAIN_SLIDING_INPUT_SCHEMA': "ninja_jwt.schema.TokenObtainSlidingInputSchema",
    'TOKEN_OBTAIN_SLIDING_REFRESH_INPUT_SCHEMA': "ninja_jwt.schema.TokenRefreshSlidingInputSchema",

    'TOKEN_BLACKLIST_INPUT_SCHEMA': "ninja_jwt.schema.TokenBlacklistInputSchema",
    'TOKEN_VERIFY_INPUT_SCHEMA': "ninja_jwt.schema.TokenVerifyInputSchema",
}
UNFOLD = {
    "SITE_TITLE": "GoldBoost",
    "SITE_HEADER": "GoldBoost",
    "SITE_URL": "/",
    "STYLES": [
        lambda request: static("games/css/summernote-lite.css"),
    ],
    "SCRIPTS": [
        lambda request: static("games/js/jquery-3.7.1.js"),
        lambda request: static("games/js/summernote-lite.js"),
        lambda request: static("games/js/summernote-client.js"),
    ],
    "COLORS": {
        "primary": {
            "50": "250 245 255",
            "100": "243 232 255",
            "200": "233 213 255",
            "300": "216 180 254",
            "400": "192 132 252",
            "500": "168 85 247",
            "600": "147 51 234",
            "700": "126 34 206",
            "800": "107 33 168",
            "900": "88 28 135",
        },
    },
    "SIDEBAR": {
        "show_search": False,  # Search in applications and models names
        "show_all_applications": False,  # Dropdown with all applications and models
        "navigation": [
            {
                "title": "Navigation",
                "separator": True,  # Top border
                "items": [
                    {
                        "title": "Dashboard",
                        "icon": "dashboard",
                        "link": reverse_lazy("admin:index"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Users",
                        "icon": "people",
                        "link": 'http://127.0.0.1:8000/admin/users/user/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
            {
                "title": "Main",
                "separator": True,  # Top border
                "items": [
                    {
                        "title": "Why choose us",
                        "icon": "view_carousel",
                        "link": 'http://127.0.0.1:8000/admin/main/whychooseus/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "News",
                        "icon": "newspaper",
                        "link": 'http://127.0.0.1:8000/admin/main/news/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Insta",
                        "icon": "camera",
                        "link": 'http://127.0.0.1:8000/admin/main/insta/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Promo code",
                        "icon": "featured_seasonal_and_gifts",
                        "link": 'http://127.0.0.1:8000/admin/main/promocode/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Reviews",
                        "icon": "reviews",
                        "link": 'http://127.0.0.1:8000/admin/main/review/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Settings",
                        "icon": "settings",
                        "link": 'http://127.0.0.1:8000/admin/main/setting/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
            {
                "title": "Products",
                "separator": True,  # Top border
                "items": [
                    {
                        "title": "Products",
                        "icon": "category",
                        "link": 'http://127.0.0.1:8000/admin/products/product/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Filters",
                        "icon": "filter_alt",
                        "link": 'http://127.0.0.1:8000/admin/products/filter/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Tags",
                        "icon": "sell",
                        "link": 'http://127.0.0.1:8000/admin/products/tag/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
            {
                "title": "Games",
                "separator": True,  # Top border
                "items": [
                    {
                        "title": "Games",
                        "icon": "joystick",
                        "link": 'http://127.0.0.1:8000/admin/games/game/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Calendars",
                        "icon": "calendar_month",
                        "link": 'http://127.0.0.1:8000/admin/games/calendar/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Calendar blocks",
                        "icon": "calendar_add_on",
                        "link": 'http://127.0.0.1:8000/admin/games/calendarblock/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Worth look",
                        "icon": "view_carousel",
                        "link": 'http://127.0.0.1:8000/admin/games/worthlook/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": "Catalog pages",
                        "icon": "menu_book",
                        "link": 'http://127.0.0.1:8000/admin/games/catalogpage/',
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": " ",
                        "link": '#',
                    },
                ],
            },
        ]
    },
}

# AUTHENTICATION_BACKENDS = [
#     # `allauth` specific authentication methods, such as login by email
#     'allauth.account.auth_backends.AuthenticationBackend',
# ]
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'django.middleware.locale.LocaleMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Add the account middleware:
    "allauth.account.middleware.AccountMiddleware",
]
# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'EMAIL_AUTHENTICATION': True,
        'APP': {
            'client_id': env('GOOGLE_OAUTH_CLIENT_ID'),
            'secret': env('GOOGLE_OAUTH_CLIENT_SECRET'),
            'key': ''
        }
    }
}
CORS_ORIGIN_ALLOW_ALL = True
CSRF_TRUSTED_ORIGINS = ["http://127.0.0.1:1337", "http://127.0.0.1", "http://*"]
ROOT_URLCONF = "config.urls"

SITE_ID = 1
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = env("EMAIL_PORT")
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL")
ABSOLUTE_URL = f'{env("MEDIA_URL")}'

CELERY_BROKER_URL = env("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND")
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_BROKER_TRANSPORT_OPTIONS = {"visibility_timeout": 3600}
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
FRONTEND_URL = env("FRONTEND_URL")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": env("DB_ENGINE"),
        "NAME": env("DB_NAME"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
        "HOST": env("DB_HOST"),
        "PORT": env("DB_PORT"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Kiev"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

LANGUAGES = [
    ('en', 'English'),
    ('ua', 'Ukrainian'),
]

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "static"
STATICFILES_DIRS = []

# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
