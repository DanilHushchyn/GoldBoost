# Generated by Django 5.0.2 on 2024-03-04 17:36

import django.db.models.deletion
import django.utils.timezone
import src.users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('notify_me', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Users',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', src.users.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('battle_tag', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('faction', models.CharField(choices=[('Alliance', 'Alliance'), ('Horde', 'Horde')], max_length=10)),
                ('additional_info', models.TextField()),
                ('class_and_spec', models.CharField(choices=[('Warrior - Arms', 'Warrior - Arms'), ('Warrior - Fury', 'Warrior - Fury'), ('Warrior - Protection', 'Warrior - Protection'), ('Paladin - Holy', 'Paladin - Holy'), ('Paladin - Protection', 'Paladin - Protection'), ('Paladin - Retribution', 'Paladin - Retribution'), ('Hunter - Beast Mastery', 'Hunter - Beast Mastery'), ('Hunter - Marksmanship', 'Hunter - Marksmanship'), ('Hunter - Survival', 'Hunter - Survival'), ('Rogue - Assassination', 'Rogue - Assassination'), ('Rogue - Outlaw', 'Rogue - Outlaw'), ('Rogue - Subtlety', 'Rogue - Subtlety'), ('Priest - Discipline', 'Priest - Discipline'), ('Priest - Holy', 'Priest - Holy'), ('Priest - Shadow', 'Priest - Shadow'), ('Death Knight - Blood', 'Death Knight - Blood'), ('Death Knight - Frost', 'Death Knight - Frost'), ('Death Knight - Unholy', 'Death Knight - Unholy'), ('Shaman - Elemental', 'Shaman - Elemental'), ('Shaman - Enhancement', 'Shaman - Enhancement'), ('Shaman - Restoration', 'Shaman - Restoration'), ('Mage - Arcane', 'Mage - Arcane'), ('Mage - Fire', 'Mage - Fire'), ('Mage - Frost', 'Mage - Frost'), ('Warlock - Affliction', 'Warlock - Affliction'), ('Warlock - Demonology', 'Warlock - Demonology'), ('Warlock - Destruction', 'Warlock - Destruction'), ('Monk - Brewmaster', 'Monk - Brewmaster'), ('Monk - Mistweaver', 'Monk - Mistweaver'), ('Monk - Windwalker', 'Monk - Windwalker'), ('Druid - Balance', 'Druid - Balance'), ('Druid - Feral', 'Druid - Feral'), ('Druid - Guardian', 'Druid - Guardian'), ('Druid - Restoration', 'Druid - Restoration'), ('Demon Hunter - Havoc', 'Demon Hunter - Havoc'), ('Demon Hunter - Vengeance', 'Demon Hunter - Vengeance')], max_length=255)),
                ('realm', models.CharField(max_length=255)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordResetToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=255, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'password_reset_token',
            },
        ),
    ]
